# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Build and run solc unit tests

on:
  push:
    branches: [ "master", "devel" ]
  pull_request:
    branches: [ "master", "devel" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    # container:
      # image: archlinux:base-devel

    steps:
    - uses: actions/checkout@v4
    
    - uses: turtlebrowser/get-conan@v1.2

    - uses: ConorMacBride/install-package@v1.1.0
      with:
        apt: build-essential cmake tree
    
    - name: Cache Conan Dependencies
      id: cache-deps
      uses: actions/cache@v4.2.3
      with:
        key: conan-deps-${{ runner.os }}-build-${{ hashFiles('**/conanfile.py') }}
        path: ~/.conan2
        
      # If we hit the cache, then we don't want to create a new profile
    - if: ${{steps.cache-conan.outputs.cache-hit != 'true'}}
      name: Create a Conan profile
      # To avoid having to build llvm locally, we specify a profile for which binaries are available from conan.io
      # run: |
      #   conan profile detect
      #   cat << EOF > ~/.conan2/profiles/llvm-no-build
      #   [settings]
      #   arch=x86_64
      #   build_type=Release
      #   compiler=gcc
      #   compiler.cppstd=17
      #   compiler.libcxx=libstdc++11
      #   compiler.version=11
      #   os=Linux
      #   EOF
      run: >
        mkdir -p ~/.conan2/profiles; 
        printf '[settings]\narch=x86_64\nbuild_type=Release\ncompiler=gcc\ncompiler.cppstd=17\ncompiler.libcxx=libstdc++11\ncompiler.version=11\nos=Linux\n' > ~/.conan2/profiles/llvm-no-build;
        printf '[settings]\narch=x86_64\nbuild_type=Release\ncompiler=gcc\ncompiler.cppstd=23\ncompiler.libcxx=libstdc++11\ncompiler.version=14\nos=Linux\n' > ~/.conan2/profiles/default;
      
    - name: Install Dependencies
      run: >
        conan install . 
        --output-folder=./dependencies 
        --settings=build_type=${{env.BUILD_TYPE}} 
        --profile:build=default
        --profile:host=llvm-no-build

    - name: Bandaid patch the cmake toolchain file to use C++23
      run: >
        sed 
        -i ${{github.workspace}}/dependencies/build/Release/generators/conan_toolchain.cmake
        -e 's/set(CMAKE_CXX_STANDARD 17)/set(CMAKE_CXX_STANDARD 23)/g'
        
    - name: Debug CI
      run: tree ${{github.workspace}}
      
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{github.workspace}}/build 
        -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/dependencies/build/Release/generators/conan_toolchain.cmake
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      # working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: cd "${{github.workspace}}/build" && ctest -C ${{env.BUILD_TYPE}}

